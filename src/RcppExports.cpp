// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// find_internal_nodes_pred
NumericVector find_internal_nodes_pred(NumericMatrix treetable);
RcppExport SEXP _bartBMA_find_internal_nodes_pred(SEXP treetableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_internal_nodes_pred(treetable));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes_pred
NumericVector find_term_nodes_pred(NumericMatrix tree_table);
RcppExport SEXP _bartBMA_find_term_nodes_pred(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes_pred(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// get_original_pred
NumericVector get_original_pred(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _bartBMA_get_original_pred(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_pred(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// bartBMA_get_testdata_term_obs_pred
NumericVector bartBMA_get_testdata_term_obs_pred(NumericMatrix test_data, NumericMatrix tree_data, NumericVector term_node_means);
RcppExport SEXP _bartBMA_bartBMA_get_testdata_term_obs_pred(SEXP test_dataSEXP, SEXP tree_dataSEXP, SEXP term_node_meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type term_node_means(term_node_meansSEXP);
    rcpp_result_gen = Rcpp::wrap(bartBMA_get_testdata_term_obs_pred(test_data, tree_data, term_node_means));
    return rcpp_result_gen;
END_RCPP
}
// get_BART_BMA_test_predictions
List get_BART_BMA_test_predictions(NumericMatrix test_data, NumericVector BIC, List sum_trees, NumericVector y_minmax);
RcppExport SEXP _bartBMA_get_BART_BMA_test_predictions(SEXP test_dataSEXP, SEXP BICSEXP, SEXP sum_treesSEXP, SEXP y_minmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BIC(BICSEXP);
    Rcpp::traits::input_parameter< List >::type sum_trees(sum_treesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_minmax(y_minmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_BART_BMA_test_predictions(test_data, BIC, sum_trees, y_minmax));
    return rcpp_result_gen;
END_RCPP
}
// get_imp_vars
NumericVector get_imp_vars(NumericVector split_vars, int num_col, NumericVector current_vars);
RcppExport SEXP _bartBMA_get_imp_vars(SEXP split_varsSEXP, SEXP num_colSEXP, SEXP current_varsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type split_vars(split_varsSEXP);
    Rcpp::traits::input_parameter< int >::type num_col(num_colSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type current_vars(current_varsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_imp_vars(split_vars, num_col, current_vars));
    return rcpp_result_gen;
END_RCPP
}
// get_weighted_var_imp
List get_weighted_var_imp(int num_vars, NumericVector BIC, List sum_trees);
RcppExport SEXP _bartBMA_get_weighted_var_imp(SEXP num_varsSEXP, SEXP BICSEXP, SEXP sum_treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_vars(num_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BIC(BICSEXP);
    Rcpp::traits::input_parameter< List >::type sum_trees(sum_treesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_weighted_var_imp(num_vars, BIC, sum_trees));
    return rcpp_result_gen;
END_RCPP
}
// csample_num
IntegerVector csample_num(IntegerVector x, int size, bool replace, NumericVector prob);
RcppExport SEXP _bartBMA_csample_num(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(csample_num(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// add_rows
NumericMatrix add_rows(NumericMatrix prior_tree_table_temp, int grow_node);
RcppExport SEXP _bartBMA_add_rows(SEXP prior_tree_table_tempSEXP, SEXP grow_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(add_rows(prior_tree_table_temp, grow_node));
    return rcpp_result_gen;
END_RCPP
}
// addcol
NumericMatrix addcol(NumericMatrix prior_tree_matrix_temp, int grow_node, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bartBMA_addcol(SEXP prior_tree_matrix_tempSEXP, SEXP grow_nodeSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(addcol(prior_tree_matrix_temp, grow_node, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter_to_end_tree
NumericMatrix set_daughter_to_end_tree(int grow_node, NumericMatrix prior_tree_table_temp, double left_daughter);
RcppExport SEXP _bartBMA_set_daughter_to_end_tree(SEXP grow_nodeSEXP, SEXP prior_tree_table_tempSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter_to_end_tree(grow_node, prior_tree_table_temp, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter_to_end_mat
NumericMatrix set_daughter_to_end_mat(double d, NumericMatrix prior_tree_matrix_temp, double left_daughter, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bartBMA_set_daughter_to_end_mat(SEXP dSEXP, SEXP prior_tree_matrix_tempSEXP, SEXP left_daughterSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter_to_end_mat(d, prior_tree_matrix_temp, left_daughter, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// remove_zero
NumericVector remove_zero(NumericVector nodes_at_depth);
RcppExport SEXP _bartBMA_remove_zero(SEXP nodes_at_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes_at_depth(nodes_at_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_zero(nodes_at_depth));
    return rcpp_result_gen;
END_RCPP
}
// order_intvec_
IntegerVector order_intvec_(IntegerVector x);
RcppExport SEXP _bartBMA_order_intvec_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_intvec_(x));
    return rcpp_result_gen;
END_RCPP
}
// get_gnp
NumericVector get_gnp(NumericVector nodes_at_depth, int grow_node);
RcppExport SEXP _bartBMA_get_gnp(SEXP nodes_at_depthSEXP, SEXP grow_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes_at_depth(nodes_at_depthSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gnp(nodes_at_depth, grow_node));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes
NumericVector find_term_nodes(NumericMatrix tree_table);
RcppExport SEXP _bartBMA_find_term_nodes(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// find_term_obs
arma::uvec find_term_obs(NumericMatrix tree_matrix_temp, double terminal_node);
RcppExport SEXP _bartBMA_find_term_obs(SEXP tree_matrix_tempSEXP, SEXP terminal_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type terminal_node(terminal_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_obs(tree_matrix_temp, terminal_node));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_function
double likelihood_function(NumericVector y_temp, NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, double a, double mu, double nu, double lambda);
RcppExport SEXP _bartBMA_likelihood_function(SEXP y_tempSEXP, SEXP treetable_tempSEXP, SEXP obs_to_nodes_tempSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_temp(y_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable_temp(treetable_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_to_nodes_temp(obs_to_nodes_tempSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_function(y_temp, treetable_temp, obs_to_nodes_temp, a, mu, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// find_internal_nodes
arma::uvec find_internal_nodes(NumericMatrix treetable);
RcppExport SEXP _bartBMA_find_internal_nodes(SEXP treetableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_internal_nodes(treetable));
    return rcpp_result_gen;
END_RCPP
}
// find_prev_nonterm
double find_prev_nonterm(arma::uvec find_nonterm, NumericVector prev);
RcppExport SEXP _bartBMA_find_prev_nonterm(SEXP find_nontermSEXP, SEXP prevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type find_nonterm(find_nontermSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prev(prevSEXP);
    rcpp_result_gen = Rcpp::wrap(find_prev_nonterm(find_nonterm, prev));
    return rcpp_result_gen;
END_RCPP
}
// find_nodes_to_update
arma::uvec find_nodes_to_update(arma::uvec all_ld, double left_daughter);
RcppExport SEXP _bartBMA_find_nodes_to_update(SEXP all_ldSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type all_ld(all_ldSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nodes_to_update(all_ld, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// set_tree_to_middle
NumericMatrix set_tree_to_middle(NumericVector node_to_update, NumericMatrix prior_tree_table_temp, int grow_node, double left_daughter);
RcppExport SEXP _bartBMA_set_tree_to_middle(SEXP node_to_updateSEXP, SEXP prior_tree_table_tempSEXP, SEXP grow_nodeSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type node_to_update(node_to_updateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(set_tree_to_middle(node_to_update, prior_tree_table_temp, grow_node, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// update_grow_obs
NumericMatrix update_grow_obs(NumericMatrix prior_tree_matrix_temp, double grow_node, double left_daughter, double d, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bartBMA_update_grow_obs(SEXP prior_tree_matrix_tempSEXP, SEXP grow_nodeSEXP, SEXP left_daughterSEXP, SEXP dSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_grow_obs(prior_tree_matrix_temp, grow_node, left_daughter, d, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// find_obs_to_update_grow
NumericMatrix find_obs_to_update_grow(NumericMatrix prior_tree_matrix_temp, double left_daughter, double d, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bartBMA_find_obs_to_update_grow(SEXP prior_tree_matrix_tempSEXP, SEXP left_daughterSEXP, SEXP dSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_obs_to_update_grow(prior_tree_matrix_temp, left_daughter, d, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// get_subset
arma::mat get_subset(arma::mat& xmat, NumericVector grow_obs);
RcppExport SEXP _bartBMA_get_subset(SEXP xmatSEXP, SEXP grow_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subset(xmat, grow_obs));
    return rcpp_result_gen;
END_RCPP
}
// get_daughter_obs
List get_daughter_obs(arma::mat& xmat, NumericVector obs_to_update, int split_var, double split_point);
RcppExport SEXP _bartBMA_get_daughter_obs(SEXP xmatSEXP, SEXP obs_to_updateSEXP, SEXP split_varSEXP, SEXP split_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obs_to_update(obs_to_updateSEXP);
    Rcpp::traits::input_parameter< int >::type split_var(split_varSEXP);
    Rcpp::traits::input_parameter< double >::type split_point(split_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(get_daughter_obs(xmat, obs_to_update, split_var, split_point));
    return rcpp_result_gen;
END_RCPP
}
// find_term_cols
NumericVector find_term_cols(NumericMatrix tree_matrix_temp, int terminal_node);
RcppExport SEXP _bartBMA_find_term_cols(SEXP tree_matrix_tempSEXP, SEXP terminal_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< int >::type terminal_node(terminal_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_cols(tree_matrix_temp, terminal_node));
    return rcpp_result_gen;
END_RCPP
}
// get_grow_obs
NumericVector get_grow_obs(arma::mat& xmat, NumericVector grow_obs, int split_var);
RcppExport SEXP _bartBMA_get_grow_obs(SEXP xmatSEXP, SEXP grow_obsSEXP, SEXP split_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    Rcpp::traits::input_parameter< int >::type split_var(split_varSEXP);
    rcpp_result_gen = Rcpp::wrap(get_grow_obs(xmat, grow_obs, split_var));
    return rcpp_result_gen;
END_RCPP
}
// grow_tree
List grow_tree(arma::mat& xmat, NumericVector y, NumericMatrix prior_tree_matrix, int grow_node, NumericMatrix prior_tree_table, int splitvar, double splitpoint, NumericVector terminal_nodes, NumericVector grow_obs, double d, NumericVector get_min, arma::mat& data_curr_node);
RcppExport SEXP _bartBMA_grow_tree(SEXP xmatSEXP, SEXP ySEXP, SEXP prior_tree_matrixSEXP, SEXP grow_nodeSEXP, SEXP prior_tree_tableSEXP, SEXP splitvarSEXP, SEXP splitpointSEXP, SEXP terminal_nodesSEXP, SEXP grow_obsSEXP, SEXP dSEXP, SEXP get_minSEXP, SEXP data_curr_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix(prior_tree_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table(prior_tree_tableSEXP);
    Rcpp::traits::input_parameter< int >::type splitvar(splitvarSEXP);
    Rcpp::traits::input_parameter< double >::type splitpoint(splitpointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type terminal_nodes(terminal_nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type get_min(get_minSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_curr_node(data_curr_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(grow_tree(xmat, y, prior_tree_matrix, grow_node, prior_tree_table, splitvar, splitpoint, terminal_nodes, grow_obs, d, get_min, data_curr_node));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter
NumericMatrix set_daughter(int left_daughter, int right_daughter, IntegerVector ld_obs, IntegerVector rd_obs, NumericMatrix tree_matrix_temp, double term_cols);
RcppExport SEXP _bartBMA_set_daughter(SEXP left_daughterSEXP, SEXP right_daughterSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP, SEXP tree_matrix_tempSEXP, SEXP term_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< int >::type right_daughter(right_daughterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rd_obs(rd_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type term_cols(term_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter(left_daughter, right_daughter, ld_obs, rd_obs, tree_matrix_temp, term_cols));
    return rcpp_result_gen;
END_RCPP
}
// order_
IntegerVector order_(NumericVector x);
RcppExport SEXP _bartBMA_order_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_(x));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_prior
double get_tree_prior(NumericMatrix tree_table, NumericMatrix tree_matrix, double alpha, double beta);
RcppExport SEXP _bartBMA_get_tree_prior(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_prior(tree_table, tree_matrix, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// start_tree
NumericMatrix start_tree(double start_mean, double start_sd);
RcppExport SEXP _bartBMA_start_tree(SEXP start_meanSEXP, SEXP start_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type start_mean(start_meanSEXP);
    Rcpp::traits::input_parameter< double >::type start_sd(start_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(start_tree(start_mean, start_sd));
    return rcpp_result_gen;
END_RCPP
}
// start_matrix
NumericMatrix start_matrix(int n);
RcppExport SEXP _bartBMA_start_matrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(start_matrix(n));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_model_occams_window
List evaluate_model_occams_window(NumericVector tree_lik, double lowest_BIC, int c, List tree_list, List tree_mat_list, IntegerVector tree_parent);
RcppExport SEXP _bartBMA_evaluate_model_occams_window(SEXP tree_likSEXP, SEXP lowest_BICSEXP, SEXP cSEXP, SEXP tree_listSEXP, SEXP tree_mat_listSEXP, SEXP tree_parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tree_lik(tree_likSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< List >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_list(tree_mat_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_parent(tree_parentSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_model_occams_window(tree_lik, lowest_BIC, c, tree_list, tree_mat_list, tree_parent));
    return rcpp_result_gen;
END_RCPP
}
// get_testdata_term_obs
NumericVector get_testdata_term_obs(NumericMatrix test_data, NumericMatrix tree_data, NumericVector term_node_means);
RcppExport SEXP _bartBMA_get_testdata_term_obs(SEXP test_dataSEXP, SEXP tree_dataSEXP, SEXP term_node_meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type term_node_means(term_node_meansSEXP);
    rcpp_result_gen = Rcpp::wrap(get_testdata_term_obs(test_data, tree_data, term_node_means));
    return rcpp_result_gen;
END_RCPP
}
// resize
List resize(const List& x, int n);
RcppExport SEXP _bartBMA_resize(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resize(x, n));
    return rcpp_result_gen;
END_RCPP
}
// resize_bigger
List resize_bigger(const List& x, int n);
RcppExport SEXP _bartBMA_resize_bigger(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_bigger(x, n));
    return rcpp_result_gen;
END_RCPP
}
// J
arma::mat J(NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, NumericVector tree_term_nodes);
RcppExport SEXP _bartBMA_J(SEXP treetable_tempSEXP, SEXP obs_to_nodes_tempSEXP, SEXP tree_term_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable_temp(treetable_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_to_nodes_temp(obs_to_nodes_tempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tree_term_nodes(tree_term_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(J(treetable_temp, obs_to_nodes_temp, tree_term_nodes));
    return rcpp_result_gen;
END_RCPP
}
// mu_vector
NumericVector mu_vector(List sum_treetable, int n);
RcppExport SEXP _bartBMA_mu_vector(SEXP sum_treetableSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sum_treetable(sum_treetableSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_vector(sum_treetable, n));
    return rcpp_result_gen;
END_RCPP
}
// W
arma::mat W(List sum_treetable, List sum_obs_to_nodes, int n);
RcppExport SEXP _bartBMA_W(SEXP sum_treetableSEXP, SEXP sum_obs_to_nodesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sum_treetable(sum_treetableSEXP);
    Rcpp::traits::input_parameter< List >::type sum_obs_to_nodes(sum_obs_to_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(W(sum_treetable, sum_obs_to_nodes, n));
    return rcpp_result_gen;
END_RCPP
}
// sumtree_likelihood_function
double sumtree_likelihood_function(NumericVector y_temp, List sum_treetable, List sum_obs_to_nodes, int n, double a, double nu, double lambda);
RcppExport SEXP _bartBMA_sumtree_likelihood_function(SEXP y_tempSEXP, SEXP sum_treetableSEXP, SEXP sum_obs_to_nodesSEXP, SEXP nSEXP, SEXP aSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_temp(y_tempSEXP);
    Rcpp::traits::input_parameter< List >::type sum_treetable(sum_treetableSEXP);
    Rcpp::traits::input_parameter< List >::type sum_obs_to_nodes(sum_obs_to_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumtree_likelihood_function(y_temp, sum_treetable, sum_obs_to_nodes, n, a, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split
List get_best_split(NumericVector resids, arma::mat& data, NumericMatrix treetable, NumericMatrix tree_mat, double a, double mu, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha, double beta, int maxOWsize, int first_round);
RcppExport SEXP _bartBMA_get_best_split(SEXP residsSEXP, SEXP dataSEXP, SEXP treetableSEXP, SEXP tree_matSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split(resids, data, treetable, tree_mat, a, mu, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha, beta, maxOWsize, first_round));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_sum
List get_best_split_sum(NumericVector resids, arma::mat& data, NumericMatrix treetable, NumericMatrix tree_mat, double a, double mu, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha, double beta, int maxOWsize, int first_round, List sum_trees, List sum_trees_mat, NumericVector y_scaled, IntegerVector parent2, int i);
RcppExport SEXP _bartBMA_get_best_split_sum(SEXP residsSEXP, SEXP dataSEXP, SEXP treetableSEXP, SEXP tree_matSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP, SEXP sum_treesSEXP, SEXP sum_trees_matSEXP, SEXP y_scaledSEXP, SEXP parent2SEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< List >::type sum_trees(sum_treesSEXP);
    Rcpp::traits::input_parameter< List >::type sum_trees_mat(sum_trees_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent2(parent2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_sum(resids, data, treetable, tree_mat, a, mu, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha, beta, maxOWsize, first_round, sum_trees, sum_trees_mat, y_scaled, parent2, i));
    return rcpp_result_gen;
END_RCPP
}
// update_mean_var
NumericVector update_mean_var(NumericMatrix tree_table, NumericMatrix tree_matrix, NumericVector resids, double a);
RcppExport SEXP _bartBMA_update_mean_var(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP residsSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mean_var(tree_table, tree_matrix, resids, a));
    return rcpp_result_gen;
END_RCPP
}
// update_predictions
List update_predictions(NumericMatrix tree_table, NumericMatrix tree_matrix, NumericVector new_mean, int n);
RcppExport SEXP _bartBMA_update_predictions(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP new_meanSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_mean(new_meanSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_predictions(tree_table, tree_matrix, new_mean, n));
    return rcpp_result_gen;
END_RCPP
}
// subsetter
NumericVector subsetter(NumericVector a, LogicalVector b);
RcppExport SEXP _bartBMA_subsetter(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetter(a, b));
    return rcpp_result_gen;
END_RCPP
}
// order_inc_
IntegerVector order_inc_(NumericVector x);
RcppExport SEXP _bartBMA_order_inc_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_inc_(x));
    return rcpp_result_gen;
END_RCPP
}
// min_which2
List min_which2(NumericVector array, int n, double minout, int whichout);
RcppExport SEXP _bartBMA_min_which2(SEXP arraySEXP, SEXP nSEXP, SEXP minoutSEXP, SEXP whichoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type minout(minoutSEXP);
    Rcpp::traits::input_parameter< int >::type whichout(whichoutSEXP);
    rcpp_result_gen = Rcpp::wrap(min_which2(array, n, minout, whichout));
    return rcpp_result_gen;
END_RCPP
}
// mll_meanvar2
double mll_meanvar2(double x, double x2, int n);
RcppExport SEXP _bartBMA_mll_meanvar2(SEXP xSEXP, SEXP x2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mll_meanvar2(x, x2, n));
    return rcpp_result_gen;
END_RCPP
}
// PELT_meanvar_norm2
IntegerVector PELT_meanvar_norm2(NumericVector resp, double pen);
RcppExport SEXP _bartBMA_PELT_meanvar_norm2(SEXP respSEXP, SEXP penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    rcpp_result_gen = Rcpp::wrap(PELT_meanvar_norm2(resp, pen));
    return rcpp_result_gen;
END_RCPP
}
// SS
double SS(arma::vec x, arma::vec y, double split);
RcppExport SEXP _bartBMA_SS(SEXP xSEXP, SEXP ySEXP, SEXP splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type split(splitSEXP);
    rcpp_result_gen = Rcpp::wrap(SS(x, y, split));
    return rcpp_result_gen;
END_RCPP
}
// gridCP
List gridCP(arma::vec x, arma::vec y, int gridSize);
RcppExport SEXP _bartBMA_gridCP(SEXP xSEXP, SEXP ySEXP, SEXP gridSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type gridSize(gridSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gridCP(x, y, gridSize));
    return rcpp_result_gen;
END_RCPP
}
// make_gridpoint_cpmat
List make_gridpoint_cpmat(NumericMatrix data, NumericVector resp, int gridsize, int num_cp);
RcppExport SEXP _bartBMA_make_gridpoint_cpmat(SEXP dataSEXP, SEXP respSEXP, SEXP gridsizeSEXP, SEXP num_cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    rcpp_result_gen = Rcpp::wrap(make_gridpoint_cpmat(data, resp, gridsize, num_cp));
    return rcpp_result_gen;
END_RCPP
}
// make_pelt_cpmat
List make_pelt_cpmat(NumericMatrix data, NumericVector resp, double pen, int num_cp);
RcppExport SEXP _bartBMA_make_pelt_cpmat(SEXP dataSEXP, SEXP respSEXP, SEXP penSEXP, SEXP num_cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    rcpp_result_gen = Rcpp::wrap(make_pelt_cpmat(data, resp, pen, num_cp));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees
List get_best_trees(arma::mat& D1, NumericMatrix resids, double a, double mu, double nu, double lambda, int c, double sigma_mu, List tree_table, List tree_mat, double lowest_BIC, int first_round, IntegerVector parent, List cp_mat_list, IntegerVector err_list, NumericMatrix test_data, double alpha, double beta, bool is_test_data, double pen, int num_cp, bool split_rule_node, bool gridpoint, int maxOWsize);
RcppExport SEXP _bartBMA_get_best_trees(SEXP D1SEXP, SEXP residsSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_muSEXP, SEXP tree_tableSEXP, SEXP tree_matSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP cp_mat_listSEXP, SEXP err_listSEXP, SEXP test_dataSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP is_test_dataSEXP, SEXP penSEXP, SEXP num_cpSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type cp_mat_list(cp_mat_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees(D1, resids, a, mu, nu, lambda, c, sigma_mu, tree_table, tree_mat, lowest_BIC, first_round, parent, cp_mat_list, err_list, test_data, alpha, beta, is_test_data, pen, num_cp, split_rule_node, gridpoint, maxOWsize));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees_sum
List get_best_trees_sum(arma::mat& D1, NumericMatrix resids, double a, double mu, double nu, double lambda, int c, double sigma_mu, List tree_table, List tree_mat, double lowest_BIC, int first_round, IntegerVector parent, List cp_mat_list, IntegerVector err_list, NumericMatrix test_data, double alpha, double beta, bool is_test_data, double pen, int num_cp, bool split_rule_node, bool gridpoint, int maxOWsize, List prev_sum_trees, List prev_sum_trees_mat, NumericVector y_scaled);
RcppExport SEXP _bartBMA_get_best_trees_sum(SEXP D1SEXP, SEXP residsSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_muSEXP, SEXP tree_tableSEXP, SEXP tree_matSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP cp_mat_listSEXP, SEXP err_listSEXP, SEXP test_dataSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP is_test_dataSEXP, SEXP penSEXP, SEXP num_cpSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP prev_sum_treesSEXP, SEXP prev_sum_trees_matSEXP, SEXP y_scaledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type cp_mat_list(cp_mat_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees(prev_sum_treesSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat(prev_sum_trees_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees_sum(D1, resids, a, mu, nu, lambda, c, sigma_mu, tree_table, tree_mat, lowest_BIC, first_round, parent, cp_mat_list, err_list, test_data, alpha, beta, is_test_data, pen, num_cp, split_rule_node, gridpoint, maxOWsize, prev_sum_trees, prev_sum_trees_mat, y_scaled));
    return rcpp_result_gen;
END_RCPP
}
// scale_response
NumericVector scale_response(double a, double b, double c, double d, NumericVector y);
RcppExport SEXP _bartBMA_scale_response(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scale_response(a, b, c, d, y));
    return rcpp_result_gen;
END_RCPP
}
// get_original
NumericVector get_original(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _bartBMA_get_original(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// BART_BMA_sumLikelihood
List BART_BMA_sumLikelihood(NumericMatrix data, NumericVector y, double start_mean, double start_sd, double a, double mu, double nu, double lambda, int c, double sigma_mu, double pen, int num_cp, NumericMatrix test_data, int num_rounds, double alpha, double beta, bool split_rule_node, bool gridpoint, int maxOWsize);
RcppExport SEXP _bartBMA_BART_BMA_sumLikelihood(SEXP dataSEXP, SEXP ySEXP, SEXP start_meanSEXP, SEXP start_sdSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_muSEXP, SEXP penSEXP, SEXP num_cpSEXP, SEXP test_dataSEXP, SEXP num_roundsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type start_mean(start_meanSEXP);
    Rcpp::traits::input_parameter< double >::type start_sd(start_sdSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< int >::type num_rounds(num_roundsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(BART_BMA_sumLikelihood(data, y, start_mean, start_sd, a, mu, nu, lambda, c, sigma_mu, pen, num_cp, test_data, num_rounds, alpha, beta, split_rule_node, gridpoint, maxOWsize));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes_gs
NumericVector find_term_nodes_gs(NumericMatrix tree_table);
RcppExport SEXP _bartBMA_find_term_nodes_gs(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes_gs(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// find_term_obs_gs
NumericVector find_term_obs_gs(NumericMatrix tree_matrix_temp, double terminal_node);
RcppExport SEXP _bartBMA_find_term_obs_gs(SEXP tree_matrix_tempSEXP, SEXP terminal_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type terminal_node(terminal_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_obs_gs(tree_matrix_temp, terminal_node));
    return rcpp_result_gen;
END_RCPP
}
// calc_rowsums
NumericVector calc_rowsums(NumericMatrix predictions);
RcppExport SEXP _bartBMA_calc_rowsums(SEXP predictionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predictions(predictionsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rowsums(predictions));
    return rcpp_result_gen;
END_RCPP
}
// calculate_resids
NumericVector calculate_resids(NumericMatrix predictions, NumericVector response);
RcppExport SEXP _bartBMA_calculate_resids(SEXP predictionsSEXP, SEXP responseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predictions(predictionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type response(responseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_resids(predictions, response));
    return rcpp_result_gen;
END_RCPP
}
// update_Gibbs_mean_var
List update_Gibbs_mean_var(NumericMatrix tree_table, NumericVector resids, double a, double sigma, double mu_mu, IntegerVector terminal_nodes, List term_obs_tree);
RcppExport SEXP _bartBMA_update_Gibbs_mean_var(SEXP tree_tableSEXP, SEXP residsSEXP, SEXP aSEXP, SEXP sigmaSEXP, SEXP mu_muSEXP, SEXP terminal_nodesSEXP, SEXP term_obs_treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type terminal_nodes(terminal_nodesSEXP);
    Rcpp::traits::input_parameter< List >::type term_obs_tree(term_obs_treeSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Gibbs_mean_var(tree_table, resids, a, sigma, mu_mu, terminal_nodes, term_obs_tree));
    return rcpp_result_gen;
END_RCPP
}
// update_sigma
double update_sigma(double a1, double b, NumericVector resids, int n);
RcppExport SEXP _bartBMA_update_sigma(SEXP a1SEXP, SEXP bSEXP, SEXP residsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma(a1, b, resids, n));
    return rcpp_result_gen;
END_RCPP
}
// find_node_means
NumericVector find_node_means(NumericMatrix sum_tree, NumericVector term_nodes);
RcppExport SEXP _bartBMA_find_node_means(SEXP sum_treeSEXP, SEXP term_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sum_tree(sum_treeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type term_nodes(term_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(find_node_means(sum_tree, term_nodes));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_info
List get_tree_info(List overall_sum_trees, List overall_sum_mat, int num_obs);
RcppExport SEXP _bartBMA_get_tree_info(SEXP overall_sum_treesSEXP, SEXP overall_sum_matSEXP, SEXP num_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overall_sum_trees(overall_sum_treesSEXP);
    Rcpp::traits::input_parameter< List >::type overall_sum_mat(overall_sum_matSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_info(overall_sum_trees, overall_sum_mat, num_obs));
    return rcpp_result_gen;
END_RCPP
}
// remove_curr_col
NumericMatrix remove_curr_col(NumericMatrix predy, int i);
RcppExport SEXP _bartBMA_remove_curr_col(SEXP predySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predy(predySEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_curr_col(predy, i));
    return rcpp_result_gen;
END_RCPP
}
// get_new_mean
NumericVector get_new_mean(IntegerVector terminal_nodes, List new_mean_var);
RcppExport SEXP _bartBMA_get_new_mean(SEXP terminal_nodesSEXP, SEXP new_mean_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type terminal_nodes(terminal_nodesSEXP);
    Rcpp::traits::input_parameter< List >::type new_mean_var(new_mean_varSEXP);
    rcpp_result_gen = Rcpp::wrap(get_new_mean(terminal_nodes, new_mean_var));
    return rcpp_result_gen;
END_RCPP
}
// update_predictions_gs
List update_predictions_gs(NumericMatrix tree_table, NumericVector new_mean, NumericVector new_var, int n, IntegerVector terminal_nodes, List term_obs_tree);
RcppExport SEXP _bartBMA_update_predictions_gs(SEXP tree_tableSEXP, SEXP new_meanSEXP, SEXP new_varSEXP, SEXP nSEXP, SEXP terminal_nodesSEXP, SEXP term_obs_treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_mean(new_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_var(new_varSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type terminal_nodes(terminal_nodesSEXP);
    Rcpp::traits::input_parameter< List >::type term_obs_tree(term_obs_treeSEXP);
    rcpp_result_gen = Rcpp::wrap(update_predictions_gs(tree_table, new_mean, new_var, n, terminal_nodes, term_obs_tree));
    return rcpp_result_gen;
END_RCPP
}
// scale_response_gs
NumericVector scale_response_gs(double a, double b, double c, double d, NumericVector y);
RcppExport SEXP _bartBMA_scale_response_gs(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scale_response_gs(a, b, c, d, y));
    return rcpp_result_gen;
END_RCPP
}
// get_original_gs
NumericVector get_original_gs(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _bartBMA_get_original_gs(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_gs(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// find_internal_nodes_gs
NumericVector find_internal_nodes_gs(NumericMatrix treetable);
RcppExport SEXP _bartBMA_find_internal_nodes_gs(SEXP treetableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_internal_nodes_gs(treetable));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_info_test_data
List get_tree_info_test_data(NumericMatrix test_data, NumericMatrix tree_data);
RcppExport SEXP _bartBMA_get_tree_info_test_data(SEXP test_dataSEXP, SEXP tree_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_info_test_data(test_data, tree_data));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_info_testdata_overall
List get_tree_info_testdata_overall(List overall_sum_trees, int num_obs, NumericMatrix test_data);
RcppExport SEXP _bartBMA_get_tree_info_testdata_overall(SEXP overall_sum_treesSEXP, SEXP num_obsSEXP, SEXP test_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overall_sum_trees(overall_sum_treesSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_info_testdata_overall(overall_sum_trees, num_obs, test_data));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler
List gibbs_sampler(List overall_sum_trees, List overall_sum_mat, NumericVector y, NumericVector BIC_weights, int num_iter, int burnin, int num_obs, int num_test_obs, double a, double sigma, double mu_mu, double nu, double lambda, List resids, NumericMatrix test_data);
RcppExport SEXP _bartBMA_gibbs_sampler(SEXP overall_sum_treesSEXP, SEXP overall_sum_matSEXP, SEXP ySEXP, SEXP BIC_weightsSEXP, SEXP num_iterSEXP, SEXP burninSEXP, SEXP num_obsSEXP, SEXP num_test_obsSEXP, SEXP aSEXP, SEXP sigmaSEXP, SEXP mu_muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP residsSEXP, SEXP test_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overall_sum_trees(overall_sum_treesSEXP);
    Rcpp::traits::input_parameter< List >::type overall_sum_mat(overall_sum_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BIC_weights(BIC_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    Rcpp::traits::input_parameter< int >::type num_test_obs(num_test_obsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< List >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(overall_sum_trees, overall_sum_mat, y, BIC_weights, num_iter, burnin, num_obs, num_test_obs, a, sigma, mu_mu, nu, lambda, resids, test_data));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler2
List gibbs_sampler2(List overall_sum_trees, List overall_sum_mat, NumericVector y, NumericVector BIC_weights, int num_iter, int burnin, int num_obs, double a, double sigma, double mu_mu, double nu, double lambda, List resids);
RcppExport SEXP _bartBMA_gibbs_sampler2(SEXP overall_sum_treesSEXP, SEXP overall_sum_matSEXP, SEXP ySEXP, SEXP BIC_weightsSEXP, SEXP num_iterSEXP, SEXP burninSEXP, SEXP num_obsSEXP, SEXP aSEXP, SEXP sigmaSEXP, SEXP mu_muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP residsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overall_sum_trees(overall_sum_treesSEXP);
    Rcpp::traits::input_parameter< List >::type overall_sum_mat(overall_sum_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BIC_weights(BIC_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< List >::type resids(residsSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler2(overall_sum_trees, overall_sum_mat, y, BIC_weights, num_iter, burnin, num_obs, a, sigma, mu_mu, nu, lambda, resids));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bartBMA_find_internal_nodes_pred", (DL_FUNC) &_bartBMA_find_internal_nodes_pred, 1},
    {"_bartBMA_find_term_nodes_pred", (DL_FUNC) &_bartBMA_find_term_nodes_pred, 1},
    {"_bartBMA_get_original_pred", (DL_FUNC) &_bartBMA_get_original_pred, 5},
    {"_bartBMA_bartBMA_get_testdata_term_obs_pred", (DL_FUNC) &_bartBMA_bartBMA_get_testdata_term_obs_pred, 3},
    {"_bartBMA_get_BART_BMA_test_predictions", (DL_FUNC) &_bartBMA_get_BART_BMA_test_predictions, 4},
    {"_bartBMA_get_imp_vars", (DL_FUNC) &_bartBMA_get_imp_vars, 3},
    {"_bartBMA_get_weighted_var_imp", (DL_FUNC) &_bartBMA_get_weighted_var_imp, 3},
    {"_bartBMA_csample_num", (DL_FUNC) &_bartBMA_csample_num, 4},
    {"_bartBMA_add_rows", (DL_FUNC) &_bartBMA_add_rows, 2},
    {"_bartBMA_addcol", (DL_FUNC) &_bartBMA_addcol, 4},
    {"_bartBMA_set_daughter_to_end_tree", (DL_FUNC) &_bartBMA_set_daughter_to_end_tree, 3},
    {"_bartBMA_set_daughter_to_end_mat", (DL_FUNC) &_bartBMA_set_daughter_to_end_mat, 5},
    {"_bartBMA_remove_zero", (DL_FUNC) &_bartBMA_remove_zero, 1},
    {"_bartBMA_order_intvec_", (DL_FUNC) &_bartBMA_order_intvec_, 1},
    {"_bartBMA_get_gnp", (DL_FUNC) &_bartBMA_get_gnp, 2},
    {"_bartBMA_find_term_nodes", (DL_FUNC) &_bartBMA_find_term_nodes, 1},
    {"_bartBMA_find_term_obs", (DL_FUNC) &_bartBMA_find_term_obs, 2},
    {"_bartBMA_likelihood_function", (DL_FUNC) &_bartBMA_likelihood_function, 7},
    {"_bartBMA_find_internal_nodes", (DL_FUNC) &_bartBMA_find_internal_nodes, 1},
    {"_bartBMA_find_prev_nonterm", (DL_FUNC) &_bartBMA_find_prev_nonterm, 2},
    {"_bartBMA_find_nodes_to_update", (DL_FUNC) &_bartBMA_find_nodes_to_update, 2},
    {"_bartBMA_set_tree_to_middle", (DL_FUNC) &_bartBMA_set_tree_to_middle, 4},
    {"_bartBMA_update_grow_obs", (DL_FUNC) &_bartBMA_update_grow_obs, 6},
    {"_bartBMA_find_obs_to_update_grow", (DL_FUNC) &_bartBMA_find_obs_to_update_grow, 5},
    {"_bartBMA_get_subset", (DL_FUNC) &_bartBMA_get_subset, 2},
    {"_bartBMA_get_daughter_obs", (DL_FUNC) &_bartBMA_get_daughter_obs, 4},
    {"_bartBMA_find_term_cols", (DL_FUNC) &_bartBMA_find_term_cols, 2},
    {"_bartBMA_get_grow_obs", (DL_FUNC) &_bartBMA_get_grow_obs, 3},
    {"_bartBMA_grow_tree", (DL_FUNC) &_bartBMA_grow_tree, 12},
    {"_bartBMA_set_daughter", (DL_FUNC) &_bartBMA_set_daughter, 6},
    {"_bartBMA_order_", (DL_FUNC) &_bartBMA_order_, 1},
    {"_bartBMA_get_tree_prior", (DL_FUNC) &_bartBMA_get_tree_prior, 4},
    {"_bartBMA_start_tree", (DL_FUNC) &_bartBMA_start_tree, 2},
    {"_bartBMA_start_matrix", (DL_FUNC) &_bartBMA_start_matrix, 1},
    {"_bartBMA_evaluate_model_occams_window", (DL_FUNC) &_bartBMA_evaluate_model_occams_window, 6},
    {"_bartBMA_get_testdata_term_obs", (DL_FUNC) &_bartBMA_get_testdata_term_obs, 3},
    {"_bartBMA_resize", (DL_FUNC) &_bartBMA_resize, 2},
    {"_bartBMA_resize_bigger", (DL_FUNC) &_bartBMA_resize_bigger, 2},
    {"_bartBMA_J", (DL_FUNC) &_bartBMA_J, 3},
    {"_bartBMA_mu_vector", (DL_FUNC) &_bartBMA_mu_vector, 2},
    {"_bartBMA_W", (DL_FUNC) &_bartBMA_W, 3},
    {"_bartBMA_sumtree_likelihood_function", (DL_FUNC) &_bartBMA_sumtree_likelihood_function, 7},
    {"_bartBMA_get_best_split", (DL_FUNC) &_bartBMA_get_best_split, 16},
    {"_bartBMA_get_best_split_sum", (DL_FUNC) &_bartBMA_get_best_split_sum, 21},
    {"_bartBMA_update_mean_var", (DL_FUNC) &_bartBMA_update_mean_var, 4},
    {"_bartBMA_update_predictions", (DL_FUNC) &_bartBMA_update_predictions, 4},
    {"_bartBMA_subsetter", (DL_FUNC) &_bartBMA_subsetter, 2},
    {"_bartBMA_order_inc_", (DL_FUNC) &_bartBMA_order_inc_, 1},
    {"_bartBMA_min_which2", (DL_FUNC) &_bartBMA_min_which2, 4},
    {"_bartBMA_mll_meanvar2", (DL_FUNC) &_bartBMA_mll_meanvar2, 3},
    {"_bartBMA_PELT_meanvar_norm2", (DL_FUNC) &_bartBMA_PELT_meanvar_norm2, 2},
    {"_bartBMA_SS", (DL_FUNC) &_bartBMA_SS, 3},
    {"_bartBMA_gridCP", (DL_FUNC) &_bartBMA_gridCP, 3},
    {"_bartBMA_make_gridpoint_cpmat", (DL_FUNC) &_bartBMA_make_gridpoint_cpmat, 4},
    {"_bartBMA_make_pelt_cpmat", (DL_FUNC) &_bartBMA_make_pelt_cpmat, 4},
    {"_bartBMA_get_best_trees", (DL_FUNC) &_bartBMA_get_best_trees, 24},
    {"_bartBMA_get_best_trees_sum", (DL_FUNC) &_bartBMA_get_best_trees_sum, 27},
    {"_bartBMA_scale_response", (DL_FUNC) &_bartBMA_scale_response, 5},
    {"_bartBMA_get_original", (DL_FUNC) &_bartBMA_get_original, 5},
    {"_bartBMA_BART_BMA_sumLikelihood", (DL_FUNC) &_bartBMA_BART_BMA_sumLikelihood, 19},
    {"_bartBMA_find_term_nodes_gs", (DL_FUNC) &_bartBMA_find_term_nodes_gs, 1},
    {"_bartBMA_find_term_obs_gs", (DL_FUNC) &_bartBMA_find_term_obs_gs, 2},
    {"_bartBMA_calc_rowsums", (DL_FUNC) &_bartBMA_calc_rowsums, 1},
    {"_bartBMA_calculate_resids", (DL_FUNC) &_bartBMA_calculate_resids, 2},
    {"_bartBMA_update_Gibbs_mean_var", (DL_FUNC) &_bartBMA_update_Gibbs_mean_var, 7},
    {"_bartBMA_update_sigma", (DL_FUNC) &_bartBMA_update_sigma, 4},
    {"_bartBMA_find_node_means", (DL_FUNC) &_bartBMA_find_node_means, 2},
    {"_bartBMA_get_tree_info", (DL_FUNC) &_bartBMA_get_tree_info, 3},
    {"_bartBMA_remove_curr_col", (DL_FUNC) &_bartBMA_remove_curr_col, 2},
    {"_bartBMA_get_new_mean", (DL_FUNC) &_bartBMA_get_new_mean, 2},
    {"_bartBMA_update_predictions_gs", (DL_FUNC) &_bartBMA_update_predictions_gs, 6},
    {"_bartBMA_scale_response_gs", (DL_FUNC) &_bartBMA_scale_response_gs, 5},
    {"_bartBMA_get_original_gs", (DL_FUNC) &_bartBMA_get_original_gs, 5},
    {"_bartBMA_find_internal_nodes_gs", (DL_FUNC) &_bartBMA_find_internal_nodes_gs, 1},
    {"_bartBMA_get_tree_info_test_data", (DL_FUNC) &_bartBMA_get_tree_info_test_data, 2},
    {"_bartBMA_get_tree_info_testdata_overall", (DL_FUNC) &_bartBMA_get_tree_info_testdata_overall, 3},
    {"_bartBMA_gibbs_sampler", (DL_FUNC) &_bartBMA_gibbs_sampler, 15},
    {"_bartBMA_gibbs_sampler2", (DL_FUNC) &_bartBMA_gibbs_sampler2, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_bartBMA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
